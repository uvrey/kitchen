LANGUAGE SPECIFICATION DOCUMENT

# Specification document for DSL design tool. Fill in the blanks.
# White space is ignored so feel free to use it as you please.
# Blank lines and lines beginning with a # are also ignored.

---

Tokens:

# (T or I) <Token name> <Token regex>
# 
# Use I header if you wish this token to be ignored in parsing stage.
# Remember to escape special characters: 
#     . ^ $ * + ? { } [ ] \ | ( ) 








---

Productions:

# P <Non-terminal> -> <Production> [| <Alternate production>]
# F [<Flag>]
# I [<List of indexes>]
# 
# Empty productions may not be used as alternate productions.
# Flags are used when building the abstract syntax tree to give context to the semantic analyser.
# Default flags are:
#     STATEMENT DECLARATION OPERATOR IDENTIFIER EMPTY 
# Symbols at the listed indexes are saved in the abstract syntax tree in the order they appear. 
# 
# For example:
#    (I)    0              1       2    3      
#     P EXPRESSION -> EXPRESSION plus TERM
#     F OPERATOR
#     I 2 1 3
#     ...results in an AST entry of (OPERATOR, plus, p [1], p [3]).








---
    
Booleans:

# T <True symbol>
# F <False symbol>
#
# This allows you to define your own boolean symbols for your language.

T
F

---
    
Datatypes:

# N <Name>
# L <Literal name>
# T <Type string>
#
# Type string has to be one of:
#     BOOLEAN STRING NUMERIC
# Literal name is the flag used in the AST to reference a literal of this type.






---

Operators:

# S <Symbol>
# A <Number of arguments>
# (T <List of types>)*
# F <Format string>
#
# The list of types must choose a type for each argument and, optionally, the return type last. 
# Multiple alternate type lists are permitted.
# Please enter a format string corresponding to your desired Python output code.
# Remember, if these operators are used recursively, to surround your format string with parentheses.
# 
# For example:
#     S @
#     A 2
#     T int string string
#     F {1} + \" is \" + {0}
#     ...will give @ 4 "answer" = "answer is 4".








---
